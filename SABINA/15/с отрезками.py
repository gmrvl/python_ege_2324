for x in [ i * 0.25 for i in range(-10000,10000)]: # 0.25 чтобы смотреть наличие точек (строго или не сторого концы отрезков)
    B = 23 <= x <= 37
    C = 41 <= x <= 73
    A = 0         # наименьшее - 0
    f = not(((not B) <= C) <= A) # в формуле вместо "x принадлежит чему-то" пишем просто букву
    if f != 1:    # всегда условие обратное самой функции (1 в этом случае истинное значение при обратном значении функции к А)
        print(x)
'''
 Алгоритм решения:
1. Шаблон
2. См. условие для А (если наименьшее - 0, наибольшее - 1)
3. См. условие для функции(формулы), если просят истинное значение функции - обратное А, если ложное,
   то обратное А и потом ложное к обратному.
4. В выведенных значениях х посмотреть промежутки, если нет разрыва, то х - ответ (длина отрезка А, 
   см. условие про длину на всякий)
5. Если есть разрыв. Определить длину отрезков и посмотреть какая длина нужна ( обычно наименьшая).
6. Определяем нужный отрезок, черти для наглядности координатную прямую х и выбираем отрезок А, который подходит условию.
7. Делаем предположение, что х ( точка) не лежит в отрезке, который подходио нашему условию(типа берем другой отрезок).
8. Делаем проверку. Нужно мысленно подставить точку из отрезка в формулу и определить её значение. 
   Если функция при взятой нами точкой выдает значение равное значению А, то мы берем этот отрезок.
   Если нет, то мы берем оба отрезка и отрезок между отрезками тоже. То есть считаем длину всего отрезка без каких-либо
   разрывов.(от максимальное значение минус минимальное = длина)'''